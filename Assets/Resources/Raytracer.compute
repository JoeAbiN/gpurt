#pragma kernel CSMain

static const float PI = 3.14159265f;

struct Ray {
	float3 origin;
	float3 direction;
	float3 energy;
};

struct HitRecord {
	float3 position;
	float t;
	float3 normal;
	float3 albedo;
	float3 specular;
	float smoothness;
	float3 emission;
};

struct Sphere {
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
	float smoothness;
	float3 emission;
};

RWTexture2D<float4> Result;

float4x4 camToWorld;
float4x4 camInvProj;

Texture2D<float4> skyboxTex;
SamplerState sampler_skyboxTex;

float3 lightDir;
float lightIntensity;

StructuredBuffer<Sphere> spheres;

float2 pixelOffset;

int numTrace;

float2 pixel;
float seed;

float sdot(float3 x, float3 y, float f = 1.0f) {
	return saturate(dot(x, y) * f);
}

float rand() {
	float res = frac(sin(seed / 100.0f * dot(pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
	seed += 1.0f;
	return res;
}

float3x3 tangentSpaceMatrix(float3 normal) {
	// Choose a helper vector for the cross product
	float3 helper = float3(1, 0, 0);
	if (abs(normal.x) > 0.99f)
		helper = float3(0, 0, 1);
	
    // Generate vectors
	float3 tangent = normalize(cross(normal, helper));
	float3 binormal = normalize(cross(normal, tangent));

	return float3x3(tangent, binormal, normal);
}

float3 randInUnitHemisphere(float3 normal, float alpha) {
	// Sample direction in hemisphere
	// alpha = 0, uniform
	// alpha = 1, cosine
	// alpha > 1, higher Phong exponent
	float cosTheta = pow(rand(), 1 / (alpha + 1));
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
	float phi = 2 * PI * rand();
	float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
	
    // Transform direction to world space
	return mul(tangentSpaceDir, tangentSpaceMatrix(normal));
}

float smoothnessToAlpha(float s) {
	return pow(1000, s * s);
}

Ray newRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
	ray.energy = float3(1, 1, 1);
	
	return ray;
}

HitRecord newHitRecord() {
    HitRecord hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.t = 9999;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0, 0, 0);
	hit.specular = float3(0, 0, 0);
	hit.smoothness = 0;
	hit.emission = float3(0, 0, 0);
	
    return hit;
}

Ray newCamRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(camToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(camInvProj, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = mul(camToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return newRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout HitRecord bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.t) {
		bestHit.t = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		bestHit.albedo = float3(0.5, 0.5, 0.5);
		bestHit.specular = 0.03;
		bestHit.smoothness = 0.2;
		bestHit.emission = float3(0, 0, 0);
	}
}

void IntersectSphere(Ray ray, inout HitRecord bestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.position;
	
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
		return;
	
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.t) {
		bestHit.t = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
		bestHit.smoothness = sphere.smoothness;
		bestHit.emission = sphere.emission;
	}
}

HitRecord Trace(Ray ray) {
	HitRecord bestHit = newHitRecord();
	
	// Check plane intersection
	IntersectGroundPlane(ray, bestHit);
	
	// Check spheres intersection
	uint numSpheres, stride;
	spheres.GetDimensions(numSpheres, stride);
	
	for (int i = 0; i < numSpheres; i++)
		IntersectSphere(ray, bestHit, spheres[i]);
	
	return bestHit;
}

float3 Shade(inout Ray ray, HitRecord hit) {
	if (hit.t < 9999) {
		// Compute probabilities of diffuse and specular reflections
		hit.albedo = min(1.0f - hit.specular, hit.albedo);
		float diffuseChance = dot(hit.albedo, 1.0f / 3.0f);
		float specularChance = dot(hit.specular, 1.0f / 3.0f);
		float sum = diffuseChance + specularChance;
		diffuseChance /= sum;
		specularChance /= sum;
		
		// Roulette-select the ray's path
		float roulette = rand();
		if (roulette < specularChance) {
			// Simplified Phong specular reflection
			float alpha = smoothnessToAlpha(hit.smoothness);
			float f = (alpha + 2) / (alpha + 1);
			ray.origin = hit.position + hit.normal * 0.001f;
			ray.direction = randInUnitHemisphere(reflect(ray.direction, hit.normal), alpha);
			ray.energy *= (1 / specularChance) * hit.specular * sdot(hit.normal, ray.direction, f);
		
		} else {
			// Diffuse Lambert reflection
			ray.origin = hit.position + hit.normal * 0.001f;
			ray.direction = randInUnitHemisphere(hit.normal, 1);
			ray.energy *= (1 / diffuseChance) * hit.albedo;// * 2 * hit.albedo * sdot(hit.normal, ray.direction);
		}
		
		return hit.emission;
		
		//// reflected = ω_r, ray.direction = ω_i,  
		//ray.origin = hit.position + hit.normal * 0.001f;
		//float3 reflected = reflect(ray.direction, hit.normal);
		//ray.direction = randInUnitHemisphere(hit.normal);
		
		//// Lambert diffuse BRDF
		//float3 diffuse = 2 * min(1.0f - hit.specular, hit.albedo);
		
		//// Phong specular BRDF
		//float alpha = 15.0f;
		//float3 specular = hit.specular * (alpha + 2) * pow(sdot(ray.direction, reflected), alpha);
		
		//// Multiply by cosine
		//ray.energy *= (diffuse + specular) * sdot(hit.normal, ray.direction);
		
		//return 0.0f;
		
		//// Reflect ray and multiplay energy with specular reflection
		//ray.origin = hit.position + hit.normal * 0.001f;
		//ray.direction = reflect(ray.direction, hit.normal);
		//ray.energy *= hit.specular;
		
		//// Shadow ray test
		//bool inShadow = false;
		//Ray shadowRay = newRay(hit.position + hit.normal * 0.001, -lightDir);
		//HitRecord shadowHit = Trace(shadowRay);
		
		//if (shadowHit.t < 9999)
		//	return float3(0, 0, 0);
		
		//return saturate(dot(hit.normal, -lightDir)) * lightIntensity * hit.albedo;
        
	} else {
        // Sample the skybox and write it
		ray.energy = 0;
		
	    float theta = acos(ray.direction.y) / -PI;
	    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		
        return skyboxTex.SampleLevel(sampler_skyboxTex, float2(phi, theta), 0).xyz * 1.8;
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {	
    // Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);
    
    // Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + pixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
	// For the rand() function
	pixel = id.xy;
	
    // Get a ray for the UVs
	Ray ray = newCamRay(uv);

    // Trace and shade
	float3 color = float3(0, 0, 0);
	for (int i = 0; i < numTrace; i++) {
		HitRecord hit = Trace(ray);
		color += ray.energy * Shade(ray, hit);
	
		if (!any(ray.energy))
			break;
	}
    
	Result[id.xy] = float4(color, 1);
}
